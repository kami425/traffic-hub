{"version":3,"file":"main.js","mappings":";;;;;;;AAAA,kC;;;;;;ACAA,2C;;;;;;ACAA,yC;;;;;;ACAA,2C;;;;;;ACAA,mC;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAqB;AAC9C;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA,kDAAkD,gBAAgB;AAClE,KAAK;AACL;;;;;;;ACda;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,qBAAqB,mBAAO,CAAC,CAA6B;AAC1D,qBAAqB,mBAAO,CAAC,CAA8B;AAC3D,qBAAqB,mBAAO,CAAC,EAA8B;AAC3D,qBAAqB,mBAAO,CAAC,EAAsB;AACnD,qBAAqB,mBAAO,CAAC,EAAuB;AACpD,qBAAqB,mBAAO,CAAC,EAAmB;;;;;;;ACRnC;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,uBAAuB,mBAAO,CAAC,CAAuB;AACtD,sBAAsB,mBAAO,CAAC,EAAqB;AACnD;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;ACpBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0CAA0C,mBAAO,CAAC,EAAS;AAC3D,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,uBAAuB,mBAAO,CAAC,EAAgB;AAC/C,oBAAoB,mBAAO,CAAC,EAAuB;AACnD;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;;;;;;AC/BA,oC;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0CAA0C,mBAAO,CAAC,EAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;;;;;;;AC1Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,UAAU;AACV,UAAU;AACV;AACA;;;;;;;ACLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B;AACA,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,gCAAgC,mBAAO,CAAC,EAAuB;AAC/D;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;;;;;;ACzCA,kD;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gCAAgC,mBAAO,CAAC,EAAuB;AAC/D,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA,uBAAuB,MAAM,aAAa,aAAa;AACvD;AACA;AACA,KAAK;AACL,gBAAgB,aAAa;AAC7B;AACA;AACA,uBAAuB,MAAM,aAAa,gBAAgB;AAC1D;AACA;AACA,KAAK;AACL;;;;;;;ACrEA,kD;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,CAAc;AACrC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,yCAAyC,mBAAO,CAAC,CAAQ;AACzD,qBAAqB,mBAAO,CAAC,CAA0B;AACvD,uBAAuB,mBAAO,CAAC,EAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,KAAK,GAAG,aAAa;AAC5F,KAAK;AACL;AACA","sources":["external commonjs \"tslib\"","external commonjs \"@nestjs/common\"","external commonjs \"@nestjs/core\"","external commonjs \"@nestjs/config\"","external commonjs \"helmet\"","D:\\Projects\\traffic-hub\\apps\\api-gateway\\src\\modules\\app\\app.module.ts","D:\\Projects\\traffic-hub\\libs\\shared\\src\\index.ts","D:\\Projects\\traffic-hub\\libs\\shared\\src\\modules\\lib\\shared.module.ts","D:\\Projects\\traffic-hub\\libs\\shared\\src\\modules\\redis\\redis.module.ts","external commonjs \"ioredis\"","D:\\Projects\\traffic-hub\\libs\\shared\\src\\modules\\redis\\redis.client.ts","D:\\Projects\\traffic-hub\\libs\\shared\\src\\utils\\constants.ts","D:\\Projects\\traffic-hub\\libs\\shared\\src\\modules\\auth\\auth.module.ts","external commonjs \"nest-keycloak-connect\"","D:\\Projects\\traffic-hub\\libs\\shared\\src\\types\\response.dto.ts","D:\\Projects\\traffic-hub\\apps\\api-gateway\\src\\configs\\proxy.config.ts","external commonjs \"http-proxy-middleware\"","webpack/bootstrap","D:\\Projects\\traffic-hub\\apps\\api-gateway\\src\\main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"helmet\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst shared_1 = require(\"@traffic-hub/shared\");\nlet AppModule = class AppModule {\n};\nexports.AppModule = AppModule;\nexports.AppModule = AppModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [config_1.ConfigModule.forRoot({ isGlobal: true }), shared_1.SharedModule],\n    })\n], AppModule);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./modules/lib/shared.module\"), exports);\ntslib_1.__exportStar(require(\"./modules/redis/redis.module\"), exports);\ntslib_1.__exportStar(require(\"./modules/redis/redis.client\"), exports);\ntslib_1.__exportStar(require(\"./types/response.dto\"), exports);\ntslib_1.__exportStar(require(\"nest-keycloak-connect\"), exports);\ntslib_1.__exportStar(require(\"./utils/constants\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SharedModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst redis_module_1 = require(\"../redis/redis.module\");\nconst auth_module_1 = require(\"../auth/auth.module\");\nlet SharedModule = class SharedModule {\n};\nexports.SharedModule = SharedModule;\nexports.SharedModule = SharedModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [\n            config_1.ConfigModule.forRoot({ isGlobal: true }),\n            redis_module_1.RedisModule,\n            auth_module_1.AuthModule\n        ],\n        exports: [redis_module_1.RedisModule],\n    })\n], SharedModule);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RedisModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst ioredis_1 = tslib_1.__importDefault(require(\"ioredis\"));\nconst config_1 = require(\"@nestjs/config\");\nconst redis_client_1 = require(\"./redis.client\");\nconst constants_1 = require(\"../../utils/constants\");\nlet RedisModule = class RedisModule {\n};\nexports.RedisModule = RedisModule;\nexports.RedisModule = RedisModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [config_1.ConfigModule],\n        providers: [\n            {\n                provide: constants_1.DI.REDIS_CLIENT,\n                inject: [config_1.ConfigService],\n                useFactory: (configService) => {\n                    return new ioredis_1.default({\n                        host: configService.get('REDIS_HOST'),\n                        port: configService.get('REDIS_PORT'),\n                        password: configService.get('REDIS_PASSWORD'),\n                    });\n                },\n            },\n            redis_client_1.RedisClient\n        ],\n        exports: [redis_client_1.RedisClient, constants_1.DI.REDIS_CLIENT],\n    })\n], RedisModule);\n","module.exports = require(\"ioredis\");","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RedisClient = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst ioredis_1 = tslib_1.__importDefault(require(\"ioredis\"));\nlet RedisClient = class RedisClient {\n    constructor(configService) {\n        this.configService = configService;\n    }\n    onModuleInit() {\n        this.client = new ioredis_1.default({\n            host: this.configService.get('REDIS_HOST'),\n            port: this.configService.get('REDIS_PORT'),\n            password: this.configService.get('REDIS_PASSWORD'),\n        });\n        this.subscriber = this.client.duplicate();\n        this.client.on('connect', () => common_1.Logger.log('Shared => RedisClient: Redis connected'));\n        this.client.on('error', (err) => common_1.Logger.error('Shared => RedisClient: Redis Client Error', err));\n        this.subscriber.on('connect', () => common_1.Logger.log('Shared => RedisClient: Redis subscriber connected'));\n        this.subscriber.on('error', (err) => common_1.Logger.error('Shared => RedisClient: Redis Subscriber Error', err));\n    }\n    onModuleDestroy() {\n        this.client.quit();\n        this.subscriber.quit();\n    }\n    async get(key) {\n        return this.client.get(key);\n    }\n    async set(key, value, ttlSeconds) {\n        if (ttlSeconds) {\n            await this.client.set(key, value, 'EX', ttlSeconds);\n        }\n        else {\n            await this.client.set(key, value);\n        }\n    }\n    async del(key) {\n        await this.client.del(key);\n    }\n    async publish(channel, message) {\n        await this.client.publish(channel, message);\n    }\n    async subscribe(channel, handler) {\n        await this.subscriber.subscribe(channel);\n        this.subscriber.on('message', (ch, msg) => {\n            if (ch === channel) {\n                handler(msg);\n            }\n        });\n    }\n};\nexports.RedisClient = RedisClient;\nexports.RedisClient = RedisClient = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _a : Object])\n], RedisClient);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DI = void 0;\nexports.DI = {\n    REDIS_CLIENT: Symbol('REDIS_CLIENT')\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthModule = void 0;\nconst tslib_1 = require(\"tslib\");\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst nest_keycloak_connect_1 = require(\"nest-keycloak-connect\");\nlet AuthModule = class AuthModule {\n};\nexports.AuthModule = AuthModule;\nexports.AuthModule = AuthModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [\n            nest_keycloak_connect_1.KeycloakConnectModule.registerAsync({\n                imports: [config_1.ConfigModule],\n                inject: [config_1.ConfigService],\n                useFactory: (config) => ({\n                    authServerUrl: config.get('KC_URL'),\n                    realm: config.get('KC_REALM'),\n                    clientId: config.get('KC_CLIENT_ID'),\n                    secret: config.get('KC_CLIENT_SECRET'),\n                }),\n            }),\n        ],\n        providers: [\n            {\n                provide: 'APP_GUARD',\n                useClass: nest_keycloak_connect_1.AuthGuard,\n            },\n            {\n                provide: 'APP_GUARD',\n                useClass: nest_keycloak_connect_1.ResourceGuard,\n            },\n            {\n                provide: 'APP_GUARD',\n                useClass: nest_keycloak_connect_1.RoleGuard,\n            },\n        ],\n        exports: [nest_keycloak_connect_1.KeycloakConnectModule],\n    })\n], AuthModule);\n","module.exports = require(\"nest-keycloak-connect\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.proxyConfiguration = proxyConfiguration;\nconst http_proxy_middleware_1 = require(\"http-proxy-middleware\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst safeJSONParse = (input) => {\n    if (!input) {\n        return null;\n    }\n    try {\n        return JSON.parse(input);\n    }\n    catch (e) {\n        return input;\n    }\n};\nconst proxyResCallback = async (proxyRes, req, res) => {\n    let body = '';\n    proxyRes.on('data', (chunk) => {\n        body += chunk;\n    });\n    proxyRes.on('end', () => {\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let statusCode = proxyRes.statusCode;\n            const data = safeJSONParse(body);\n            // Change default shape of error object of NestJS  to project default shape\n            if (data.status && data.response && data.message && data.name) {\n                statusCode = data.status;\n            }\n            const successFlag = statusCode >= 200 && statusCode < 300;\n            const response = {\n                success: successFlag,\n                data: successFlag ? data : null,\n                message: successFlag ? null : data?.message || 'Unexpected error',\n            };\n            res.status(statusCode).json(response);\n        }\n        catch (err) {\n            common_1.Logger.error(err);\n            res.status(500).json({\n                success: false,\n                data: null,\n                message: 'Invalid response from service',\n            });\n        }\n    });\n};\nfunction proxyConfiguration(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\napp, globalPrefix) {\n    const configService = app.get(config_1.ConfigService);\n    const userServiceUrl = configService.get('USER_SERVICE_URL');\n    const roadwayServiceUrl = configService.get('ROADWAY_SERVICE_URL');\n    app.use(`/${globalPrefix}/user`, (0, http_proxy_middleware_1.createProxyMiddleware)({\n        target: userServiceUrl,\n        changeOrigin: true,\n        pathRewrite: { [`^/${globalPrefix}/user`]: '' },\n        selfHandleResponse: true,\n        onProxyRes: proxyResCallback,\n    }));\n    app.use(`/${globalPrefix}/roadway`, (0, http_proxy_middleware_1.createProxyMiddleware)({\n        target: roadwayServiceUrl,\n        changeOrigin: true,\n        pathRewrite: { [`^/${globalPrefix}/roadway`]: '' },\n        selfHandleResponse: true,\n        onProxyRes: proxyResCallback,\n    }));\n}\n","module.exports = require(\"http-proxy-middleware\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst core_1 = require(\"@nestjs/core\");\nconst config_1 = require(\"@nestjs/config\");\nconst helmet_1 = tslib_1.__importDefault(require(\"helmet\"));\nconst app_module_1 = require(\"./modules/app/app.module\");\nconst proxy_config_1 = require(\"./configs/proxy.config\");\nasync function bootstrap() {\n    const app = await core_1.NestFactory.create(app_module_1.AppModule);\n    const configService = app.get(config_1.ConfigService);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const port = configService.get('PORT');\n    const globalPrefix = 'api';\n    app.setGlobalPrefix(globalPrefix);\n    (0, proxy_config_1.proxyConfiguration)(app, globalPrefix);\n    app.use((0, helmet_1.default)());\n    await app.listen(port, () => {\n        common_1.Logger.log(`Gateway is running on: http://localhost:${port}/${globalPrefix}`);\n    });\n}\nbootstrap();\n"],"names":[],"sourceRoot":""}